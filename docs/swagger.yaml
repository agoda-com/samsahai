definitions:
  v1.CommandAndArgs:
    properties:
      args:
        description: +optional
        items:
          type: string
        type: array
      command:
        items:
          type: string
        type: array
    type: object
  v1.Component:
    properties:
      chart:
        $ref: '#/definitions/v1.ComponentChart'
        type: object
      dependencies:
        description: +optional
        items:
          $ref: '#/definitions/v1.Dependency'
        type: array
      image:
        $ref: '#/definitions/v1.ComponentImage'
        type: object
      name:
        type: string
      parent:
        description: +optional
        type: string
      source:
        description: +optional
        type: string
      values:
        $ref: '#/definitions/v1.ComponentValues'
        description: |-
          +optional
          +kubebuilder:pruning:PreserveUnknownFields
        type: object
    type: object
  v1.ComponentChart:
    properties:
      name:
        type: string
      repository:
        type: string
      version:
        description: +optional
        type: string
    type: object
  v1.ComponentImage:
    properties:
      pattern:
        description: +optional
        type: string
      repository:
        type: string
      tag:
        description: +optional
        type: string
    type: object
  v1.ComponentValues:
    additionalProperties:
      type: object
    type: object
  v1.ConfigActivePromotion:
    properties:
      demotionTimeout:
        description: |-
          DemotionTimeout defines maximum duration for doing active demotion
          +optional
        type: string
      deployment:
        $ref: '#/definitions/v1.ConfigDeploy'
        description: Deployment represents configuration about deploy
        type: object
      maxHistories:
        description: |-
          MaxHistories defines maximum length of ActivePromotionHistory stored per team
          +optional
        type: integer
      outdatedNotification:
        $ref: '#/definitions/v1.OutdatedNotification'
        description: |-
          OutdatedNotification defines a configuration of outdated notification
          +optional
        type: object
      rollbackTimeout:
        description: |-
          RollbackTimeout defines maximum duration for rolling back active promotion
          +optional
        type: string
      tearDownDuration:
        description: |-
          TearDownDuration defines duration before teardown the previous active namespace
          +optional
        type: string
      timeout:
        description: |-
          Timeout defines maximum duration for doing active promotion
          +optional
        type: string
    type: object
  v1.ConfigComponentUpgrade:
    properties:
      criteria:
        description: +optional
        type: string
      interval:
        description: +optional
        type: string
    type: object
  v1.ConfigDeploy:
    properties:
      componentCleanupTimeout:
        description: |-
          ComponentCleanupTimeout defines timeout duration of component cleaning up
          +optional
        type: string
      engine:
        description: |-
          Engine defines method of deploying

          mock - for test only, always return success

          helm3 - deploy chart with helm3
          +optional
        type: string
      testRunner:
        $ref: '#/definitions/v1.ConfigTestRunner'
        description: |-
          TestRunner represents configuration about test
          +optional
        type: object
      timeout:
        description: |-
          Timeout defines maximum duration for deploying environment
          +optional
        type: string
    type: object
  v1.ConfigReporter:
    properties:
      cmd:
        $ref: '#/definitions/v1.Shell'
        description: +optional
        type: object
      msTeams:
        $ref: '#/definitions/v1.MSTeams'
        description: +optional
        type: object
      optionals:
        description: +optional
        items:
          $ref: '#/definitions/v1.ReportOption'
        type: array
      reportMock:
        description: +optional
        type: boolean
      rest:
        $ref: '#/definitions/v1.Rest'
        description: +optional
        type: object
      slack:
        $ref: '#/definitions/v1.Slack'
        description: +optional
        type: object
    type: object
  v1.ConfigSpec:
    properties:
      activePromotion:
        $ref: '#/definitions/v1.ConfigActivePromotion'
        description: |-
          ActivePromotion represents configuration about active promotion
          +optional
        type: object
      components:
        description: Components represents all components that are managed
        items:
          $ref: '#/definitions/v1.Component'
        type: array
      envs:
        description: |-
          Envs represents urls of values file per environments
          ordering by less priority to high priority
          +optional
        type: object
      report:
        $ref: '#/definitions/v1.ConfigReporter'
        description: |-
          Reporter represents configuration about reporter
          +optional
        type: object
      staging:
        $ref: '#/definitions/v1.ConfigStaging'
        description: Staging represents configuration about staging
        type: object
    type: object
  v1.ConfigStaging:
    properties:
      deployment:
        $ref: '#/definitions/v1.ConfigDeploy'
        description: Deployment represents configuration about deploy
        type: object
      maxHistoryDays:
        description: |-
          MaxHistoryDays defines maximum days of QueueHistory stored
          +optional
        type: integer
      maxRetry:
        description: |-
          MaxRetry defines max retry counts of component upgrade
          +optional
        type: integer
    type: object
  v1.ConfigTeamcity:
    properties:
      branch:
        type: string
      buildTypeID:
        type: string
    type: object
  v1.ConfigTestMock:
    properties:
      result:
        type: boolean
    type: object
  v1.ConfigTestRunner:
    properties:
      pollingTime:
        description: +optional
        type: string
      teamcity:
        $ref: '#/definitions/v1.ConfigTeamcity'
        description: +optional
        type: object
      testMock:
        $ref: '#/definitions/v1.ConfigTestMock'
        description: +optional
        type: object
      timeout:
        description: +optional
        type: string
    type: object
  v1.Dependency:
    properties:
      chart:
        $ref: '#/definitions/v1.ComponentChart'
        description: +optional
        type: object
      image:
        $ref: '#/definitions/v1.ComponentImage'
        type: object
      name:
        type: string
      parent:
        description: +optional
        type: string
      source:
        description: +optional
        type: string
      values:
        $ref: '#/definitions/v1.ComponentValues'
        description: |-
          +optional
          +kubebuilder:pruning:PreserveUnknownFields
        type: object
    type: object
  v1.Endpoint:
    properties:
      url:
        type: string
    type: object
  v1.Image:
    properties:
      repository:
        type: string
      tag:
        type: string
    type: object
  v1.MSTeams:
    properties:
      componentUpgrade:
        $ref: '#/definitions/v1.ConfigComponentUpgrade'
        description: +optional
        type: object
      groups:
        items:
          $ref: '#/definitions/v1.MSTeamsGroup'
        type: array
    type: object
  v1.MSTeamsGroup:
    properties:
      channelNameOrIDs:
        items:
          type: string
        type: array
      groupNameOrID:
        type: string
    type: object
  v1.OutdatedNotification:
    properties:
      exceedDuration:
        description: +optional
        type: string
      excludeWeekendCalculation:
        description: +optional
        type: boolean
    type: object
  v1.Queue:
    properties:
      spec:
        $ref: '#/definitions/v1.QueueSpec'
        type: object
      status:
        $ref: '#/definitions/v1.QueueStatus'
        type: object
    type: object
  v1.QueueCondition:
    properties:
      lastTransitionTime:
        description: +optional
        type: string
      message:
        description: +optional
        type: string
      reason:
        description: +optional
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  v1.QueueHistory:
    properties:
      spec:
        $ref: '#/definitions/v1.QueueHistorySpec'
        type: object
      status:
        $ref: '#/definitions/v1.QueueHistoryStatus'
        type: object
    type: object
  v1.QueueHistorySpec:
    properties:
      appliedValues:
        $ref: '#/definitions/v1.Values'
        type: object
      createdAt:
        type: string
      isDeploySuccess:
        type: boolean
      isReverify:
        type: boolean
      isTestSuccess:
        type: boolean
      queue:
        $ref: '#/definitions/v1.Queue'
        type: object
      stableComponents:
        items:
          $ref: '#/definitions/v1.StableComponent'
        type: array
    type: object
  v1.QueueHistoryStatus:
    type: object
  v1.QueueSpec:
    properties:
      name:
        description: Name represents Component name
        type: string
      nextProcessAt:
        description: NextProcessAt represents time to wait for process this queue
        type: string
      noOfOrder:
        description: |-
          NoOfOrder defines the position in queue
          lower is will be picked first
        type: integer
      noOfRetry:
        description: |-
          NoOfRetry defines how many times this component has been tested
          +optional
        type: integer
      repository:
        description: Repository represents Docker image repository
        type: string
      teamName:
        description: TeamName represents team owner of the queue
        type: string
      type:
        description: Type represents how we will process this queue
        type: string
      version:
        description: Version represents Docker image tag version
        type: string
    type: object
  v1.QueueStatus:
    properties:
      conditions:
        description: |-
          Conditions contains observations of the resource's state e.g.,
          Queue deployed, being tested
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.QueueCondition'
        type: array
      createdAt:
        description: CreatedAt represents time when the component has been added to
          queue
        type: string
      deployEngine:
        description: DeployEngine represents engine using during installation
        type: string
      imageMissingList:
        description: ImageMissingList defines image missing list
        items:
          $ref: '#/definitions/v1.Image'
        type: array
      kubeZipLog:
        description: KubeZipLog defines log of k8s resources during deployment in
          base64 zip format
        type: string
      nextProcessAt:
        description: NextProcessAt represents time to wait for process this queue
        type: string
      noOfProcessed:
        description: NoOfProcessed represents how many time that this queue had been
          processed
        type: integer
      queueHistoryName:
        description: QueueHistoryName defines name of history of this queue
        type: string
      releaseName:
        description: ReleaseName defines name of helmrelease
        type: string
      startDeployTime:
        description: StartDeployTime represents the time when this queue start deploying
        type: string
      startTestingTime:
        description: StartTestingTime represents the time when this queue start testing
        type: string
      state:
        description: State represents current status of this queue
        type: string
      testRunners:
        $ref: '#/definitions/v1.TestRunner'
        description: TestRunner defines the test runner
        type: object
      updatedAt:
        description: UpdatedAt represents time when the component was processed
        type: string
    type: object
  v1.ReportOption:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  v1.Rest:
    properties:
      activePromotion:
        $ref: '#/definitions/v1.RestObject'
        description: +optional
        type: object
      componentUpgrade:
        $ref: '#/definitions/v1.RestObject'
        description: +optional
        type: object
      imageMissing:
        $ref: '#/definitions/v1.RestObject'
        description: +optional
        type: object
    type: object
  v1.RestObject:
    properties:
      endpoints:
        items:
          $ref: '#/definitions/v1.Endpoint'
        type: array
    type: object
  v1.Shell:
    properties:
      activePromotion:
        $ref: '#/definitions/v1.CommandAndArgs'
        description: +optional
        type: object
      componentUpgrade:
        $ref: '#/definitions/v1.CommandAndArgs'
        description: +optional
        type: object
      imageMissing:
        $ref: '#/definitions/v1.CommandAndArgs'
        description: +optional
        type: object
    type: object
  v1.Slack:
    properties:
      channels:
        items:
          type: string
        type: array
      componentUpgrade:
        $ref: '#/definitions/v1.ConfigComponentUpgrade'
        description: +optional
        type: object
    type: object
  v1.StableComponent:
    properties:
      spec:
        $ref: '#/definitions/v1.StableComponentSpec'
        type: object
      status:
        $ref: '#/definitions/v1.StableComponentStatus'
        type: object
    type: object
  v1.StableComponentSpec:
    properties:
      name:
        description: Name represents Component name
        type: string
      repository:
        description: Repository represents Docker image repository
        type: string
      updatedBy:
        description: |-
          UpdatedBy represents a person who updated the StableComponent
          +optional
        type: string
      version:
        description: Version represents Docker image tag version
        type: string
    type: object
  v1.StableComponentStatus:
    properties:
      createdAt:
        type: string
      updatedAt:
        type: string
    type: object
  v1.Teamcity:
    properties:
      buildID:
        type: string
      buildTypeID:
        type: string
      buildURL:
        type: string
    type: object
  v1.TestRunner:
    properties:
      teamcity:
        $ref: '#/definitions/v1.Teamcity'
        type: object
    type: object
  v1.Values:
    additionalProperties:
      type: object
    type: object
  webhook.activePromotion:
    properties:
      inQueues:
        description: +Optional
        example:
        - team1
        - team2
        items:
          type: string
        type: array
      running:
        description: +Optional
        type: string
    type: object
  webhook.activePromotionHistories:
    items: {}
    type: array
  webhook.errResp:
    properties:
      error:
        type: string
    type: object
  webhook.healthCheckJSON:
    properties:
      msg:
        example: ok
        type: string
    type: object
  webhook.newComponentEventJSON:
    properties:
      component:
        type: string
      repository:
        type: string
    type: object
  webhook.teamActivePromotion:
    properties:
      current:
        description: +Optional
        type: string
      historyNames:
        description: +Optional
        example:
        - team1-20191010-080000
        - team1-20191009-080000
        items:
          type: string
        type: array
    type: object
  webhook.teamComponentsJSON:
    additionalProperties: {}
    type: object
  webhook.teamEnvConnections:
    properties:
      active:
        description: +optional
        type: object
      preActive:
        description: +optional
        type: object
      staging:
        description: +optional
        type: object
    type: object
  webhook.teamJSON:
    properties:
      connections:
        $ref: '#/definitions/webhook.teamEnvConnections'
        type: object
      spec:
        type: string
      status:
        type: string
      teamName:
        type: string
    type: object
  webhook.teamQueueJSON:
    properties:
      current:
        description: +Optional
        type: string
      historyNames:
        items:
          type: string
        type: array
      noOfQueue:
        description: +optional
        type: integer
      queues:
        description: +Optional
        type: string
    type: object
  webhook.teamsJSON:
    properties:
      teams:
        items:
          type: string
        type: array
    type: object
  webhook.versionJSON:
    properties:
      gitCommit:
        type: string
      version:
        type: string
    type: object
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /activepromotions:
    get:
      description: get current active promotions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.activePromotion'
        "500":
          description: cannot get activepromotions
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: get current active promotions
      tags:
      - GET
  /healthz:
    get:
      consumes:
      - application/json
      description: Endpoint for server health check
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.healthCheckJSON'
      summary: Health check
      tags:
      - GET
  /teams:
    get:
      description: Returns a list of teams that currently running on Samsahai.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.teamsJSON'
      summary: Get Teams
      tags:
      - GET
  /teams/{team}:
    get:
      description: Returns team information. (namespaces, connections)
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.teamJSON'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Get Team
      tags:
      - GET
  /teams/{team}/activepromotions:
    get:
      description: get active promotions by team name
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.teamActivePromotion'
        "404":
          description: team {team} not found
          schema:
            type: string
        "500":
          description: cannot get activepromotion/activepromotion histories of team
            {team}
          schema:
            type: string
      summary: get active promotions by team name
      tags:
      - GET
  /teams/{team}/activepromotions/histories:
    get:
      description: get active promotion histories by team name
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.activePromotionHistories'
        "400":
          description: team should not be empty
          schema:
            type: string
        "500":
          description: cannot get activepromotion histories of team {team}
          schema:
            type: string
      summary: get active promotion histories by team name
      tags:
      - GET
  /teams/{team}/activepromotions/histories/{history}:
    get:
      description: get active promotion history by team and history name
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Active promotion history name
        in: path
        name: history
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: team/history should not be empty
          schema:
            type: string
        "404":
          description: activepromotion history {history} of team {team} not found
          schema:
            type: string
        "500":
          description: cannot get activepromotion history {history} of team {team}
          schema:
            type: string
      summary: get active promotion history by team and history name
      tags:
      - GET
  /teams/{team}/activepromotions/histories/{history}/log:
    get:
      description: Returns zip log file of the active promotion history
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Active promotion history name
        in: path
        name: history
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: team/history should not be empty
          schema:
            type: string
        "404":
          description: activepromotion history {history} of team {team} not found
          schema:
            type: string
        "500":
          description: cannot get activepromotion history {history} of team {team}
          schema:
            type: string
      summary: Get zip log of active promotion history
      tags:
      - GET
  /teams/{team}/components:
    get:
      description: Returns list of components of team
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.teamComponentsJSON'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Get Team Component
      tags:
      - GET
  /teams/{team}/components/{component}/values:
    get:
      description: get team stable component values
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Component name
        in: path
        name: component
        required: true
        type: string
      - description: Accept
        enum:
        - application/json
        - application/x-yaml
        in: header
        name: accept
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Component not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: get team stable component values
      tags:
      - GET
  /teams/{team}/config:
    get:
      description: get team configuration
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Accept
        enum:
        - application/json
        - application/x-yaml
        in: header
        name: accept
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: get team configuration
      tags:
      - GET
  /teams/{team}/queue:
    get:
      description: Returns queue information of new component upgrading flow.
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.teamQueueJSON'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Get Team's Queues
      tags:
      - GET
  /teams/{team}/queue/histories/{queue}:
    get:
      description: Return queue history of team by id
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Queue history name
        in: path
        name: queue
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.QueueHistory'
        "404":
          description: Queue history not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Get Team Queue History
      tags:
      - GET
  /teams/{team}/queue/histories/{queue}/log:
    get:
      description: Returns zip log file of the queue history
      parameters:
      - description: Team name
        in: path
        name: team
        required: true
        type: string
      - description: Queue history name
        in: path
        name: queue
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.QueueHistory'
        "404":
          description: Queue history not found
          schema:
            $ref: '#/definitions/webhook.errResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Get Team Queue History Log
      tags:
      - GET
  /version:
    get:
      description: Get service version information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhook.versionJSON'
      summary: Service Version
      tags:
      - GET
  /webhook/component:
    post:
      consumes:
      - application/json
      description: Endpoint for manually triggering new component update
      parameters:
      - description: New Component
        in: body
        name: newComponentEventJSON
        required: true
        schema:
          $ref: '#/definitions/webhook.newComponentEventJSON'
          type: object
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/webhook.errResp'
      summary: Webhook New Component
      tags:
      - POST
swagger: "2.0"
