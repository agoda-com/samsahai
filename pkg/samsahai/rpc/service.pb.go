// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.9.1
// source: pkg/samsahai/rpc/service.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComponentUpgrade_UpgradeStatus int32

const (
	ComponentUpgrade_UpgradeStatus_FAILURE  ComponentUpgrade_UpgradeStatus = 0
	ComponentUpgrade_UpgradeStatus_SUCCESS  ComponentUpgrade_UpgradeStatus = 1
	ComponentUpgrade_UpgradeStatus_CANCELED ComponentUpgrade_UpgradeStatus = 2
)

// Enum value maps for ComponentUpgrade_UpgradeStatus.
var (
	ComponentUpgrade_UpgradeStatus_name = map[int32]string{
		0: "UpgradeStatus_FAILURE",
		1: "UpgradeStatus_SUCCESS",
		2: "UpgradeStatus_CANCELED",
	}
	ComponentUpgrade_UpgradeStatus_value = map[string]int32{
		"UpgradeStatus_FAILURE":  0,
		"UpgradeStatus_SUCCESS":  1,
		"UpgradeStatus_CANCELED": 2,
	}
)

func (x ComponentUpgrade_UpgradeStatus) Enum() *ComponentUpgrade_UpgradeStatus {
	p := new(ComponentUpgrade_UpgradeStatus)
	*p = x
	return p
}

func (x ComponentUpgrade_UpgradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentUpgrade_UpgradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_samsahai_rpc_service_proto_enumTypes[0].Descriptor()
}

func (ComponentUpgrade_UpgradeStatus) Type() protoreflect.EnumType {
	return &file_pkg_samsahai_rpc_service_proto_enumTypes[0]
}

func (x ComponentUpgrade_UpgradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentUpgrade_UpgradeStatus.Descriptor instead.
func (ComponentUpgrade_UpgradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{6, 0}
}

type ComponentUpgrade_IssueType int32

const (
	ComponentUpgrade_IssueType_UNKNOWN                ComponentUpgrade_IssueType = 0
	ComponentUpgrade_IssueType_DESIRED_VERSION_FAILED ComponentUpgrade_IssueType = 1
	ComponentUpgrade_IssueType_IMAGE_MISSING          ComponentUpgrade_IssueType = 2
	ComponentUpgrade_IssueType_ENVIRONMENT_ISSUE      ComponentUpgrade_IssueType = 3
)

// Enum value maps for ComponentUpgrade_IssueType.
var (
	ComponentUpgrade_IssueType_name = map[int32]string{
		0: "IssueType_UNKNOWN",
		1: "IssueType_DESIRED_VERSION_FAILED",
		2: "IssueType_IMAGE_MISSING",
		3: "IssueType_ENVIRONMENT_ISSUE",
	}
	ComponentUpgrade_IssueType_value = map[string]int32{
		"IssueType_UNKNOWN":                0,
		"IssueType_DESIRED_VERSION_FAILED": 1,
		"IssueType_IMAGE_MISSING":          2,
		"IssueType_ENVIRONMENT_ISSUE":      3,
	}
)

func (x ComponentUpgrade_IssueType) Enum() *ComponentUpgrade_IssueType {
	p := new(ComponentUpgrade_IssueType)
	*p = x
	return p
}

func (x ComponentUpgrade_IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentUpgrade_IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_samsahai_rpc_service_proto_enumTypes[1].Descriptor()
}

func (ComponentUpgrade_IssueType) Type() protoreflect.EnumType {
	return &file_pkg_samsahai_rpc_service_proto_enumTypes[1]
}

func (x ComponentUpgrade_IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentUpgrade_IssueType.Descriptor instead.
func (ComponentUpgrade_IssueType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{6, 1}
}

type ComponentUpgrade_ReverificationStatus int32

const (
	ComponentUpgrade_ReverificationStatus_UNKNOWN ComponentUpgrade_ReverificationStatus = 0
	ComponentUpgrade_ReverificationStatus_FAILURE ComponentUpgrade_ReverificationStatus = 1
	ComponentUpgrade_ReverificationStatus_SUCCESS ComponentUpgrade_ReverificationStatus = 2
)

// Enum value maps for ComponentUpgrade_ReverificationStatus.
var (
	ComponentUpgrade_ReverificationStatus_name = map[int32]string{
		0: "ReverificationStatus_UNKNOWN",
		1: "ReverificationStatus_FAILURE",
		2: "ReverificationStatus_SUCCESS",
	}
	ComponentUpgrade_ReverificationStatus_value = map[string]int32{
		"ReverificationStatus_UNKNOWN": 0,
		"ReverificationStatus_FAILURE": 1,
		"ReverificationStatus_SUCCESS": 2,
	}
)

func (x ComponentUpgrade_ReverificationStatus) Enum() *ComponentUpgrade_ReverificationStatus {
	p := new(ComponentUpgrade_ReverificationStatus)
	*p = x
	return p
}

func (x ComponentUpgrade_ReverificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentUpgrade_ReverificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_samsahai_rpc_service_proto_enumTypes[2].Descriptor()
}

func (ComponentUpgrade_ReverificationStatus) Type() protoreflect.EnumType {
	return &file_pkg_samsahai_rpc_service_proto_enumTypes[2]
}

func (x ComponentUpgrade_ReverificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentUpgrade_ReverificationStatus.Descriptor instead.
func (ComponentUpgrade_ReverificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{6, 2}
}

type PullRequestTearDownDuration_Criteria int32

const (
	// UNKNOWN represents criterion not being set
	PullRequestTearDownDuration_Criteria_UNKNOWN PullRequestTearDownDuration_Criteria = 0
	PullRequestTearDownDuration_Criteria_BOTH    PullRequestTearDownDuration_Criteria = 1
	PullRequestTearDownDuration_Criteria_FAILURE PullRequestTearDownDuration_Criteria = 2
	PullRequestTearDownDuration_Criteria_SUCCESS PullRequestTearDownDuration_Criteria = 3
)

// Enum value maps for PullRequestTearDownDuration_Criteria.
var (
	PullRequestTearDownDuration_Criteria_name = map[int32]string{
		0: "Criteria_UNKNOWN",
		1: "Criteria_BOTH",
		2: "Criteria_FAILURE",
		3: "Criteria_SUCCESS",
	}
	PullRequestTearDownDuration_Criteria_value = map[string]int32{
		"Criteria_UNKNOWN": 0,
		"Criteria_BOTH":    1,
		"Criteria_FAILURE": 2,
		"Criteria_SUCCESS": 3,
	}
)

func (x PullRequestTearDownDuration_Criteria) Enum() *PullRequestTearDownDuration_Criteria {
	p := new(PullRequestTearDownDuration_Criteria)
	*p = x
	return p
}

func (x PullRequestTearDownDuration_Criteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PullRequestTearDownDuration_Criteria) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_samsahai_rpc_service_proto_enumTypes[3].Descriptor()
}

func (PullRequestTearDownDuration_Criteria) Type() protoreflect.EnumType {
	return &file_pkg_samsahai_rpc_service_proto_enumTypes[3]
}

func (x PullRequestTearDownDuration_Criteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PullRequestTearDownDuration_Criteria.Descriptor instead.
func (PullRequestTearDownDuration_Criteria) EnumDescriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{21, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{0}
}

type TeamWithBundleName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName   string `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	BundleName string `protobuf:"bytes,2,opt,name=bundleName,proto3" json:"bundleName,omitempty"`
}

func (x *TeamWithBundleName) Reset() {
	*x = TeamWithBundleName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWithBundleName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWithBundleName) ProtoMessage() {}

func (x *TeamWithBundleName) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWithBundleName.ProtoReflect.Descriptor instead.
func (*TeamWithBundleName) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *TeamWithBundleName) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamWithBundleName) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

type BundleName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BundleName) Reset() {
	*x = BundleName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleName) ProtoMessage() {}

func (x *BundleName) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleName.ProtoReflect.Descriptor instead.
func (*BundleName) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *BundleName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TeamName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamName) Reset() {
	*x = TeamName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamName) ProtoMessage() {}

func (x *TeamName) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamName.ProtoReflect.Descriptor instead.
func (*TeamName) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *TeamName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PriorityQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queues []string `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *PriorityQueues) Reset() {
	*x = PriorityQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityQueues) ProtoMessage() {}

func (x *PriorityQueues) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityQueues.ProtoReflect.Descriptor instead.
func (*PriorityQueues) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *PriorityQueues) GetQueues() []string {
	if x != nil {
		return x.Queues
	}
	return nil
}

type PullRequestDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependencies []*Component `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *PullRequestDependencies) Reset() {
	*x = PullRequestDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestDependencies) ProtoMessage() {}

func (x *PullRequestDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestDependencies.ProtoReflect.Descriptor instead.
func (*PullRequestDependencies) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *PullRequestDependencies) GetDependencies() []*Component {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ComponentUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               ComponentUpgrade_UpgradeStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=samsahai.io.samsahai.ComponentUpgrade_UpgradeStatus" json:"status,omitempty"`
	Name                 string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TeamName             string                                `protobuf:"bytes,3,opt,name=teamName,proto3" json:"teamName,omitempty"`
	Components           []*Component                          `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"`
	IssueType            ComponentUpgrade_IssueType            `protobuf:"varint,5,opt,name=issueType,proto3,enum=samsahai.io.samsahai.ComponentUpgrade_IssueType" json:"issueType,omitempty"`
	QueueHistoryName     string                                `protobuf:"bytes,6,opt,name=queueHistoryName,proto3" json:"queueHistoryName,omitempty"`
	ImageMissingList     []*Image                              `protobuf:"bytes,7,rep,name=imageMissingList,proto3" json:"imageMissingList,omitempty"`
	Namespace            string                                `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TestBuildTypeID      string                                `protobuf:"bytes,9,opt,name=testBuildTypeID,proto3" json:"testBuildTypeID,omitempty"`
	Runs                 int32                                 `protobuf:"varint,10,opt,name=runs,proto3" json:"runs,omitempty"`
	IsReverify           bool                                  `protobuf:"varint,11,opt,name=isReverify,proto3" json:"isReverify,omitempty"`
	ReverificationStatus ComponentUpgrade_ReverificationStatus `protobuf:"varint,12,opt,name=reverificationStatus,proto3,enum=samsahai.io.samsahai.ComponentUpgrade_ReverificationStatus" json:"reverificationStatus,omitempty"`
	DeploymentIssues     []*DeploymentIssue                    `protobuf:"bytes,13,rep,name=deploymentIssues,proto3" json:"deploymentIssues,omitempty"`
	PullRequestComponent *TeamWithPullRequest                  `protobuf:"bytes,14,opt,name=pullRequestComponent,proto3" json:"pullRequestComponent,omitempty"`
	PullRequestNamespace string                                `protobuf:"bytes,15,opt,name=pullRequestNamespace,proto3" json:"pullRequestNamespace,omitempty"`
}

func (x *ComponentUpgrade) Reset() {
	*x = ComponentUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentUpgrade) ProtoMessage() {}

func (x *ComponentUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentUpgrade.ProtoReflect.Descriptor instead.
func (*ComponentUpgrade) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *ComponentUpgrade) GetStatus() ComponentUpgrade_UpgradeStatus {
	if x != nil {
		return x.Status
	}
	return ComponentUpgrade_UpgradeStatus_FAILURE
}

func (x *ComponentUpgrade) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentUpgrade) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *ComponentUpgrade) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentUpgrade) GetIssueType() ComponentUpgrade_IssueType {
	if x != nil {
		return x.IssueType
	}
	return ComponentUpgrade_IssueType_UNKNOWN
}

func (x *ComponentUpgrade) GetQueueHistoryName() string {
	if x != nil {
		return x.QueueHistoryName
	}
	return ""
}

func (x *ComponentUpgrade) GetImageMissingList() []*Image {
	if x != nil {
		return x.ImageMissingList
	}
	return nil
}

func (x *ComponentUpgrade) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComponentUpgrade) GetTestBuildTypeID() string {
	if x != nil {
		return x.TestBuildTypeID
	}
	return ""
}

func (x *ComponentUpgrade) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *ComponentUpgrade) GetIsReverify() bool {
	if x != nil {
		return x.IsReverify
	}
	return false
}

func (x *ComponentUpgrade) GetReverificationStatus() ComponentUpgrade_ReverificationStatus {
	if x != nil {
		return x.ReverificationStatus
	}
	return ComponentUpgrade_ReverificationStatus_UNKNOWN
}

func (x *ComponentUpgrade) GetDeploymentIssues() []*DeploymentIssue {
	if x != nil {
		return x.DeploymentIssues
	}
	return nil
}

func (x *ComponentUpgrade) GetPullRequestComponent() *TeamWithPullRequest {
	if x != nil {
		return x.PullRequestComponent
	}
	return nil
}

func (x *ComponentUpgrade) GetPullRequestNamespace() string {
	if x != nil {
		return x.PullRequestNamespace
	}
	return ""
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Component) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *Image) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type ImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ImageList) Reset() {
	*x = ImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageList) ProtoMessage() {}

func (x *ImageList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageList.ProtoReflect.Descriptor instead.
func (*ImageList) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *ImageList) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type TeamWithCurrentComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName   string       `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *TeamWithCurrentComponent) Reset() {
	*x = TeamWithCurrentComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWithCurrentComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWithCurrentComponent) ProtoMessage() {}

func (x *TeamWithCurrentComponent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWithCurrentComponent.ProtoReflect.Descriptor instead.
func (*TeamWithCurrentComponent) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{10}
}

func (x *TeamWithCurrentComponent) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamWithCurrentComponent) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

type DeploymentIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueType         string              `protobuf:"bytes,1,opt,name=issueType,proto3" json:"issueType,omitempty"`
	FailureComponents []*FailureComponent `protobuf:"bytes,2,rep,name=failureComponents,proto3" json:"failureComponents,omitempty"`
}

func (x *DeploymentIssue) Reset() {
	*x = DeploymentIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentIssue) ProtoMessage() {}

func (x *DeploymentIssue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentIssue.ProtoReflect.Descriptor instead.
func (*DeploymentIssue) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeploymentIssue) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *DeploymentIssue) GetFailureComponents() []*FailureComponent {
	if x != nil {
		return x.FailureComponents
	}
	return nil
}

type FailureComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName             string `protobuf:"bytes,1,opt,name=componentName,proto3" json:"componentName,omitempty"`
	FirstFailureContainerName string `protobuf:"bytes,2,opt,name=firstFailureContainerName,proto3" json:"firstFailureContainerName,omitempty"`
	RestartCount              int32  `protobuf:"varint,3,opt,name=restartCount,proto3" json:"restartCount,omitempty"`
	NodeName                  string `protobuf:"bytes,4,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *FailureComponent) Reset() {
	*x = FailureComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureComponent) ProtoMessage() {}

func (x *FailureComponent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureComponent.ProtoReflect.Descriptor instead.
func (*FailureComponent) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{12}
}

func (x *FailureComponent) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *FailureComponent) GetFirstFailureContainerName() string {
	if x != nil {
		return x.FirstFailureContainerName
	}
	return ""
}

func (x *FailureComponent) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *FailureComponent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type TeamWithNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName  string `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *TeamWithNamespace) Reset() {
	*x = TeamWithNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWithNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWithNamespace) ProtoMessage() {}

func (x *TeamWithNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWithNamespace.ProtoReflect.Descriptor instead.
func (*TeamWithNamespace) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{13}
}

func (x *TeamWithNamespace) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamWithNamespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type TeamWithPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName         string   `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	BundleName       string   `protobuf:"bytes,2,opt,name=bundleName,proto3" json:"bundleName,omitempty"`
	PRNumber         string   `protobuf:"bytes,3,opt,name=PRNumber,proto3" json:"PRNumber,omitempty"`
	CommitSHA        string   `protobuf:"bytes,4,opt,name=commitSHA,proto3" json:"commitSHA,omitempty"`
	Namespace        string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	MaxRetryQueue    int32    `protobuf:"varint,6,opt,name=maxRetryQueue,proto3" json:"maxRetryQueue,omitempty"`
	ImageMissingList []*Image `protobuf:"bytes,7,rep,name=imageMissingList,proto3" json:"imageMissingList,omitempty"`
}

func (x *TeamWithPullRequest) Reset() {
	*x = TeamWithPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWithPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWithPullRequest) ProtoMessage() {}

func (x *TeamWithPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWithPullRequest.ProtoReflect.Descriptor instead.
func (*TeamWithPullRequest) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{14}
}

func (x *TeamWithPullRequest) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamWithPullRequest) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

func (x *TeamWithPullRequest) GetPRNumber() string {
	if x != nil {
		return x.PRNumber
	}
	return ""
}

func (x *TeamWithPullRequest) GetCommitSHA() string {
	if x != nil {
		return x.CommitSHA
	}
	return ""
}

func (x *TeamWithPullRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TeamWithPullRequest) GetMaxRetryQueue() int32 {
	if x != nil {
		return x.MaxRetryQueue
	}
	return 0
}

func (x *TeamWithPullRequest) GetImageMissingList() []*Image {
	if x != nil {
		return x.ImageMissingList
	}
	return nil
}

type PullRequestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrences     int32                        `protobuf:"varint,1,opt,name=concurrences,proto3" json:"concurrences,omitempty"`
	MaxRetry         int32                        `protobuf:"varint,2,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	MaxHistoryDays   int32                        `protobuf:"varint,3,opt,name=maxHistoryDays,proto3" json:"maxHistoryDays,omitempty"`
	Trigger          *PullRequestTriggerConfig    `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	GitRepository    string                       `protobuf:"bytes,5,opt,name=gitRepository,proto3" json:"gitRepository,omitempty"`
	TearDownDuration *PullRequestTearDownDuration `protobuf:"bytes,6,opt,name=tearDownDuration,proto3" json:"tearDownDuration,omitempty"`
}

func (x *PullRequestConfig) Reset() {
	*x = PullRequestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestConfig) ProtoMessage() {}

func (x *PullRequestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestConfig.ProtoReflect.Descriptor instead.
func (*PullRequestConfig) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{15}
}

func (x *PullRequestConfig) GetConcurrences() int32 {
	if x != nil {
		return x.Concurrences
	}
	return 0
}

func (x *PullRequestConfig) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *PullRequestConfig) GetMaxHistoryDays() int32 {
	if x != nil {
		return x.MaxHistoryDays
	}
	return 0
}

func (x *PullRequestConfig) GetTrigger() *PullRequestTriggerConfig {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *PullRequestConfig) GetGitRepository() string {
	if x != nil {
		return x.GitRepository
	}
	return ""
}

func (x *PullRequestConfig) GetTearDownDuration() *PullRequestTearDownDuration {
	if x != nil {
		return x.TearDownDuration
	}
	return nil
}

type PullRequestTriggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRetry    int32  `protobuf:"varint,1,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	PollingTime string `protobuf:"bytes,2,opt,name=pollingTime,proto3" json:"pollingTime,omitempty"`
}

func (x *PullRequestTriggerConfig) Reset() {
	*x = PullRequestTriggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestTriggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestTriggerConfig) ProtoMessage() {}

func (x *PullRequestTriggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestTriggerConfig.ProtoReflect.Descriptor instead.
func (*PullRequestTriggerConfig) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{16}
}

func (x *PullRequestTriggerConfig) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *PullRequestTriggerConfig) GetPollingTime() string {
	if x != nil {
		return x.PollingTime
	}
	return ""
}

type ComponentSourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentSources []*ComponentSource `protobuf:"bytes,1,rep,name=ComponentSources,proto3" json:"ComponentSources,omitempty"`
}

func (x *ComponentSourceList) Reset() {
	*x = ComponentSourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentSourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentSourceList) ProtoMessage() {}

func (x *ComponentSourceList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentSourceList.ProtoReflect.Descriptor instead.
func (*ComponentSourceList) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{17}
}

func (x *ComponentSourceList) GetComponentSources() []*ComponentSource {
	if x != nil {
		return x.ComponentSources
	}
	return nil
}

type ComponentSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName string `protobuf:"bytes,1,opt,name=componentName,proto3" json:"componentName,omitempty"`
	Source        string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Pattern       string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Image         *Image `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ComponentSource) Reset() {
	*x = ComponentSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentSource) ProtoMessage() {}

func (x *ComponentSource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentSource.ProtoReflect.Descriptor instead.
func (*ComponentSource) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{18}
}

func (x *ComponentSource) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ComponentSource) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ComponentSource) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ComponentSource) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type ComponentVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ComponentVersion) Reset() {
	*x = ComponentVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVersion) ProtoMessage() {}

func (x *ComponentVersion) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVersion.ProtoReflect.Descriptor instead.
func (*ComponentVersion) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{19}
}

func (x *ComponentVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PullRequestTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace        string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TeamName         string   `protobuf:"bytes,3,opt,name=teamName,proto3" json:"teamName,omitempty"`
	Result           string   `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	ImageMissingList []*Image `protobuf:"bytes,5,rep,name=imageMissingList,proto3" json:"imageMissingList,omitempty"`
}

func (x *PullRequestTrigger) Reset() {
	*x = PullRequestTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestTrigger) ProtoMessage() {}

func (x *PullRequestTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestTrigger.ProtoReflect.Descriptor instead.
func (*PullRequestTrigger) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{20}
}

func (x *PullRequestTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullRequestTrigger) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PullRequestTrigger) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *PullRequestTrigger) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *PullRequestTrigger) GetImageMissingList() []*Image {
	if x != nil {
		return x.ImageMissingList
	}
	return nil
}

type PullRequestTearDownDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration int64                                `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Criteria PullRequestTearDownDuration_Criteria `protobuf:"varint,2,opt,name=criteria,proto3,enum=samsahai.io.samsahai.PullRequestTearDownDuration_Criteria" json:"criteria,omitempty"`
}

func (x *PullRequestTearDownDuration) Reset() {
	*x = PullRequestTearDownDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestTearDownDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestTearDownDuration) ProtoMessage() {}

func (x *PullRequestTearDownDuration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_samsahai_rpc_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestTearDownDuration.ProtoReflect.Descriptor instead.
func (*PullRequestTearDownDuration) Descriptor() ([]byte, []int) {
	return file_pkg_samsahai_rpc_service_proto_rawDescGZIP(), []int{21}
}

func (x *PullRequestTearDownDuration) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PullRequestTearDownDuration) GetCriteria() PullRequestTearDownDuration_Criteria {
	if x != nil {
		return x.Criteria
	}
	return PullRequestTearDownDuration_Criteria_UNKNOWN
}

var File_pkg_samsahai_rpc_service_proto protoreflect.FileDescriptor

var file_pkg_samsahai_rpc_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x50, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x20, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x5e, 0x0a,
	0x17, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xd3, 0x09,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f,
	0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x6f, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x14, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x86, 0x01, 0x0a,
	0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x10, 0x03, 0x22, 0x7c, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x40, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x98, 0x02,
	0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x52, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x52, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x48, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x48, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x47, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x79, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x18, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x68, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a,
	0x1b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x22, 0x5f, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x42,
	0x4f, 0x54, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x32, 0x8f, 0x0d, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x12, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x27, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x17,
	0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a,
	0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x17,
	0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a,
	0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x19,
	0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x72, 0x0a, 0x28, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61,
	0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x1a, 0x53,
	0x65, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x24, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2d, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x27, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69,
	0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x1d,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x68, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61,
	0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x68, 0x61, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x12, 0x5a, 0x10, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x61, 0x6d, 0x73, 0x61,
	0x68, 0x61, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_samsahai_rpc_service_proto_rawDescOnce sync.Once
	file_pkg_samsahai_rpc_service_proto_rawDescData = file_pkg_samsahai_rpc_service_proto_rawDesc
)

func file_pkg_samsahai_rpc_service_proto_rawDescGZIP() []byte {
	file_pkg_samsahai_rpc_service_proto_rawDescOnce.Do(func() {
		file_pkg_samsahai_rpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_samsahai_rpc_service_proto_rawDescData)
	})
	return file_pkg_samsahai_rpc_service_proto_rawDescData
}

var file_pkg_samsahai_rpc_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pkg_samsahai_rpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pkg_samsahai_rpc_service_proto_goTypes = []interface{}{
	(ComponentUpgrade_UpgradeStatus)(0),        // 0: samsahai.io.samsahai.ComponentUpgrade.UpgradeStatus
	(ComponentUpgrade_IssueType)(0),            // 1: samsahai.io.samsahai.ComponentUpgrade.IssueType
	(ComponentUpgrade_ReverificationStatus)(0), // 2: samsahai.io.samsahai.ComponentUpgrade.ReverificationStatus
	(PullRequestTearDownDuration_Criteria)(0),  // 3: samsahai.io.samsahai.PullRequestTearDownDuration.Criteria
	(*Empty)(nil),                       // 4: samsahai.io.samsahai.Empty
	(*TeamWithBundleName)(nil),          // 5: samsahai.io.samsahai.TeamWithBundleName
	(*BundleName)(nil),                  // 6: samsahai.io.samsahai.BundleName
	(*TeamName)(nil),                    // 7: samsahai.io.samsahai.TeamName
	(*PriorityQueues)(nil),              // 8: samsahai.io.samsahai.PriorityQueues
	(*PullRequestDependencies)(nil),     // 9: samsahai.io.samsahai.PullRequestDependencies
	(*ComponentUpgrade)(nil),            // 10: samsahai.io.samsahai.ComponentUpgrade
	(*Component)(nil),                   // 11: samsahai.io.samsahai.Component
	(*Image)(nil),                       // 12: samsahai.io.samsahai.Image
	(*ImageList)(nil),                   // 13: samsahai.io.samsahai.ImageList
	(*TeamWithCurrentComponent)(nil),    // 14: samsahai.io.samsahai.TeamWithCurrentComponent
	(*DeploymentIssue)(nil),             // 15: samsahai.io.samsahai.DeploymentIssue
	(*FailureComponent)(nil),            // 16: samsahai.io.samsahai.FailureComponent
	(*TeamWithNamespace)(nil),           // 17: samsahai.io.samsahai.TeamWithNamespace
	(*TeamWithPullRequest)(nil),         // 18: samsahai.io.samsahai.TeamWithPullRequest
	(*PullRequestConfig)(nil),           // 19: samsahai.io.samsahai.PullRequestConfig
	(*PullRequestTriggerConfig)(nil),    // 20: samsahai.io.samsahai.PullRequestTriggerConfig
	(*ComponentSourceList)(nil),         // 21: samsahai.io.samsahai.ComponentSourceList
	(*ComponentSource)(nil),             // 22: samsahai.io.samsahai.ComponentSource
	(*ComponentVersion)(nil),            // 23: samsahai.io.samsahai.ComponentVersion
	(*PullRequestTrigger)(nil),          // 24: samsahai.io.samsahai.PullRequestTrigger
	(*PullRequestTearDownDuration)(nil), // 25: samsahai.io.samsahai.PullRequestTearDownDuration
}
var file_pkg_samsahai_rpc_service_proto_depIdxs = []int32{
	11, // 0: samsahai.io.samsahai.PullRequestDependencies.dependencies:type_name -> samsahai.io.samsahai.Component
	0,  // 1: samsahai.io.samsahai.ComponentUpgrade.status:type_name -> samsahai.io.samsahai.ComponentUpgrade.UpgradeStatus
	11, // 2: samsahai.io.samsahai.ComponentUpgrade.components:type_name -> samsahai.io.samsahai.Component
	1,  // 3: samsahai.io.samsahai.ComponentUpgrade.issueType:type_name -> samsahai.io.samsahai.ComponentUpgrade.IssueType
	12, // 4: samsahai.io.samsahai.ComponentUpgrade.imageMissingList:type_name -> samsahai.io.samsahai.Image
	2,  // 5: samsahai.io.samsahai.ComponentUpgrade.reverificationStatus:type_name -> samsahai.io.samsahai.ComponentUpgrade.ReverificationStatus
	15, // 6: samsahai.io.samsahai.ComponentUpgrade.deploymentIssues:type_name -> samsahai.io.samsahai.DeploymentIssue
	18, // 7: samsahai.io.samsahai.ComponentUpgrade.pullRequestComponent:type_name -> samsahai.io.samsahai.TeamWithPullRequest
	12, // 8: samsahai.io.samsahai.Component.image:type_name -> samsahai.io.samsahai.Image
	12, // 9: samsahai.io.samsahai.ImageList.images:type_name -> samsahai.io.samsahai.Image
	11, // 10: samsahai.io.samsahai.TeamWithCurrentComponent.components:type_name -> samsahai.io.samsahai.Component
	16, // 11: samsahai.io.samsahai.DeploymentIssue.failureComponents:type_name -> samsahai.io.samsahai.FailureComponent
	12, // 12: samsahai.io.samsahai.TeamWithPullRequest.imageMissingList:type_name -> samsahai.io.samsahai.Image
	20, // 13: samsahai.io.samsahai.PullRequestConfig.trigger:type_name -> samsahai.io.samsahai.PullRequestTriggerConfig
	25, // 14: samsahai.io.samsahai.PullRequestConfig.tearDownDuration:type_name -> samsahai.io.samsahai.PullRequestTearDownDuration
	22, // 15: samsahai.io.samsahai.ComponentSourceList.ComponentSources:type_name -> samsahai.io.samsahai.ComponentSource
	12, // 16: samsahai.io.samsahai.ComponentSource.image:type_name -> samsahai.io.samsahai.Image
	12, // 17: samsahai.io.samsahai.PullRequestTrigger.imageMissingList:type_name -> samsahai.io.samsahai.Image
	3,  // 18: samsahai.io.samsahai.PullRequestTearDownDuration.criteria:type_name -> samsahai.io.samsahai.PullRequestTearDownDuration.Criteria
	7,  // 19: samsahai.io.samsahai.RPC.GetTeamActiveNamespace:input_type -> samsahai.io.samsahai.TeamName
	10, // 20: samsahai.io.samsahai.RPC.RunPostComponentUpgrade:input_type -> samsahai.io.samsahai.ComponentUpgrade
	10, // 21: samsahai.io.samsahai.RPC.RunPostPullRequestQueue:input_type -> samsahai.io.samsahai.ComponentUpgrade
	24, // 22: samsahai.io.samsahai.RPC.RunPostPullRequestTrigger:input_type -> samsahai.io.samsahai.PullRequestTrigger
	18, // 23: samsahai.io.samsahai.RPC.RunPostPullRequestQueueTestRunnerTrigger:input_type -> samsahai.io.samsahai.TeamWithPullRequest
	14, // 24: samsahai.io.samsahai.RPC.GetMissingVersions:input_type -> samsahai.io.samsahai.TeamWithCurrentComponent
	10, // 25: samsahai.io.samsahai.RPC.SendUpdateStateQueueMetric:input_type -> samsahai.io.samsahai.ComponentUpgrade
	5,  // 26: samsahai.io.samsahai.RPC.GetBundleName:input_type -> samsahai.io.samsahai.TeamWithBundleName
	7,  // 27: samsahai.io.samsahai.RPC.GetPriorityQueues:input_type -> samsahai.io.samsahai.TeamName
	5,  // 28: samsahai.io.samsahai.RPC.GetPullRequestBundleDependencies:input_type -> samsahai.io.samsahai.TeamWithBundleName
	5,  // 29: samsahai.io.samsahai.RPC.GetPullRequestConfig:input_type -> samsahai.io.samsahai.TeamWithBundleName
	18, // 30: samsahai.io.samsahai.RPC.GetPullRequestComponentSources:input_type -> samsahai.io.samsahai.TeamWithPullRequest
	22, // 31: samsahai.io.samsahai.RPC.GetComponentVersion:input_type -> samsahai.io.samsahai.ComponentSource
	17, // 32: samsahai.io.samsahai.RPC.DeployActiveServicesIntoPullRequestEnvironment:input_type -> samsahai.io.samsahai.TeamWithNamespace
	18, // 33: samsahai.io.samsahai.RPC.CreatePullRequestEnvironment:input_type -> samsahai.io.samsahai.TeamWithPullRequest
	17, // 34: samsahai.io.samsahai.RPC.DestroyPullRequestEnvironment:input_type -> samsahai.io.samsahai.TeamWithNamespace
	17, // 35: samsahai.io.samsahai.RPC.GetTeamActiveNamespace:output_type -> samsahai.io.samsahai.TeamWithNamespace
	4,  // 36: samsahai.io.samsahai.RPC.RunPostComponentUpgrade:output_type -> samsahai.io.samsahai.Empty
	4,  // 37: samsahai.io.samsahai.RPC.RunPostPullRequestQueue:output_type -> samsahai.io.samsahai.Empty
	4,  // 38: samsahai.io.samsahai.RPC.RunPostPullRequestTrigger:output_type -> samsahai.io.samsahai.Empty
	4,  // 39: samsahai.io.samsahai.RPC.RunPostPullRequestQueueTestRunnerTrigger:output_type -> samsahai.io.samsahai.Empty
	13, // 40: samsahai.io.samsahai.RPC.GetMissingVersions:output_type -> samsahai.io.samsahai.ImageList
	4,  // 41: samsahai.io.samsahai.RPC.SendUpdateStateQueueMetric:output_type -> samsahai.io.samsahai.Empty
	6,  // 42: samsahai.io.samsahai.RPC.GetBundleName:output_type -> samsahai.io.samsahai.BundleName
	8,  // 43: samsahai.io.samsahai.RPC.GetPriorityQueues:output_type -> samsahai.io.samsahai.PriorityQueues
	9,  // 44: samsahai.io.samsahai.RPC.GetPullRequestBundleDependencies:output_type -> samsahai.io.samsahai.PullRequestDependencies
	19, // 45: samsahai.io.samsahai.RPC.GetPullRequestConfig:output_type -> samsahai.io.samsahai.PullRequestConfig
	21, // 46: samsahai.io.samsahai.RPC.GetPullRequestComponentSources:output_type -> samsahai.io.samsahai.ComponentSourceList
	23, // 47: samsahai.io.samsahai.RPC.GetComponentVersion:output_type -> samsahai.io.samsahai.ComponentVersion
	4,  // 48: samsahai.io.samsahai.RPC.DeployActiveServicesIntoPullRequestEnvironment:output_type -> samsahai.io.samsahai.Empty
	4,  // 49: samsahai.io.samsahai.RPC.CreatePullRequestEnvironment:output_type -> samsahai.io.samsahai.Empty
	4,  // 50: samsahai.io.samsahai.RPC.DestroyPullRequestEnvironment:output_type -> samsahai.io.samsahai.Empty
	35, // [35:51] is the sub-list for method output_type
	19, // [19:35] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pkg_samsahai_rpc_service_proto_init() }
func file_pkg_samsahai_rpc_service_proto_init() {
	if File_pkg_samsahai_rpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_samsahai_rpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWithBundleName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWithCurrentComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWithNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWithPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestTriggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentSourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_samsahai_rpc_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestTearDownDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_samsahai_rpc_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_samsahai_rpc_service_proto_goTypes,
		DependencyIndexes: file_pkg_samsahai_rpc_service_proto_depIdxs,
		EnumInfos:         file_pkg_samsahai_rpc_service_proto_enumTypes,
		MessageInfos:      file_pkg_samsahai_rpc_service_proto_msgTypes,
	}.Build()
	File_pkg_samsahai_rpc_service_proto = out.File
	file_pkg_samsahai_rpc_service_proto_rawDesc = nil
	file_pkg_samsahai_rpc_service_proto_goTypes = nil
	file_pkg_samsahai_rpc_service_proto_depIdxs = nil
}
